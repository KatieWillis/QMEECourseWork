dplyr::glimpse(iris)
utils::View(iris)
dplyr::filter(iris, Sepal.Length > 7)
dplyr::slice(iris, 10:15)
i <- 0 #Initialize i
while(i < Inf) {
if (i == 20) {
break } # Break out of the while loop!
else {
cat("i equals " , i , " \n")
i <- i + 1 # Update i
}
}
for (i in 1:10) {
if ((i %% 2) == 0)
next # pass to next iteration of loop
print(i)
}
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
# Runs a simulation of the ricker model
# Returns a vector of length generations
N <- rep(NA, generations)
# Creates a vector of NA
N[1] <- N0
for (t in 2:generations)
{
N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
}
return (N)
}
plot(Ricker(generations=10), type="l")
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
stochrick()
data <- stochrick()
data
dim(data)
print(system.time(res2<-stochrick()))
runif(1000,.5,1.5)
?sapply
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print(p0))
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,function(x) <- print(x*100))
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
#initialize
N<-matrix(NA,numyears,length(p0))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,function(x){print(x*100)})
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(1:length(p0),function(pop){
sapply(2:numyears,function(yr){
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
})
})
#for each pop, loop through the years
return(N)
}
stochrickvect()
p0=runif(1000,.5,1.5)
p0
N<-matrix(NA,numyears,length(p0))
numyears = 100
N<-matrix(NA,numyears,length(p0))
N
N[1,]<-p0
N
head(N)
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
for (yr in 2:numyears){
N[yr,:]<-N[yr-1,p0]*exp(r*(1-N[yr-1,p0]/K)+rnorm(1,0,sigma))
}
#for each pop, loop through the years
return(N)
}
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
for (yr in 2:numyears){
N[yr,]<-N[yr-1,p0]*exp(r*(1-N[yr-1,p0]/K)+rnorm(1,0,sigma))
}
#for each pop, loop through the years
return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
for (yr in 2:numyears){
N[yr,]<-p0*exp(r*(1-p0/K)+rnorm(1,0,sigma))
}
#for each pop, loop through the years
return(N)
}
stochrickvect()
print(system.time(res2<-stochrick()))
print(system.time(res2<-stochrickvect()))
stochrick()
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
for (yr in 2:numyears){
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#N[yr,]<-p0*exp(r*(1-p0/K)+rnorm(1,0,sigma))
}
N#[yr,] <- sapply(2:numyears,function(yr){p0*exp(r*(1-p0/K)+rnorm(1,0,sigma))})
#for each pop, loop through the years
return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
#for (yr in 2:numyears){
#  N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#}
N[yr,] <- sapply(2:numyears,function(yr){N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
#for each pop, loop through the years
return(N)
}
print(system.time(res2<-stochrickvect()))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
#for (yr in 2:numyears){
#  N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#}
N[yr,] <- sapply(2:numyears,function(yr){N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
#for each pop, loop through the years
return(N)
}
print(system.time(res2<-stochrick()))
print(system.time(res2<-stochrickvect()))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
#N<-matrix(NA,numyears,length(p0))
#N[1,]<-p0
#loop through the populations
#for (yr in 2:numyears){
#  N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#}
N <- sapply(2:numyears,function(yr){N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
#for each pop, loop through the years
return(N)
}
print(system.time(res2<-stochrickvect()))
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
#for (yr in 2:numyears){
#  N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#}
sapply(2:numyears,function(yr){N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
#for each pop, loop through the years
return(N)
}
stochrickvect()
stochrickvect()
stochrickvect()
stochrickvect()
print(system.time(res2<-stochrickvect()))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
#for (yr in 2:numyears){
#  N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#}
apply(2:numyears,function(yr){N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
return(N)
}
print(system.time(res2<-stochrickvect()))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
#for (yr in 2:numyears){
#  N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#}
lapply(2:numyears,function(yr){N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
return(N)
}
print(system.time(res2<-stochrickvect()))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
for (yr in 2:numyears){
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
#lapply(2:numyears,function(yr){N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
return(N)
}
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
#for (yr in 2:numyears){
#  N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
#}
lapply(2:numyears,function(yr){N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))})
return(N)
}
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
for (yr in 2:numyears){
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
}
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
print(system.time(res2<-stochrickvect()))
Data = stochrickvect()
plot(Data)
Data = stochrickvect()
Data
plot(Data[,])
print("Vectorized Stochastic Ricker takes:")
plot(1:100,Data)
plot(1:100,Data[,1])
print("Vectorized Stochastic Ricker takes:")
plot(1:100,Data[,2])
plot(1:100,Data[,3])
plot(1:100,Data[,1])
## run a simulation that involves sampling from a population
x <- rnorm(50) #Generate your population
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) { #only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
## Run 100 iterations using vectorization:
result <- lapply(1:100, function(i) doit(x))
## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
result[[i]] <- doit(x)
}
## run a simulation that involves sampling from a population with try
x <- rnorm(50) #Generate your population
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
## Try using "try" with vectorization:
result <- lapply(1:100, function(i) try(doit(x), FALSE))
## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
result[[i]] <- try(doit(x), FALSE)
}
## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
result
## run a simulation that involves sampling from a population with try
x <- rnorm(50) #Generate your population
x
sample(x, replace = TRUE)
sample(x, replace = TRUE)
sample(x, replace = TRUE)
Exponential <- function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)
# Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
#
browser()
}
return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
q
load(../Data/KeyWestAnnualMeanTemperature.Rdata)
load(../Data/KeyWestAnnualMeanTemperature.Rdata)
load("../Data/KeyWestAnnualMeanTemperature.Rdata")
load("../Data/KeyWestAnnualMeanTemperature.Rdata")
load("../Data/KeyWestAnnualMeanTemperature.Rdata")
getwd#
getwd()
load("../Data/KeyWestAnnualMeanTemperature.RData")
view(ats)
View(ats)
x = ats$Temp[1:-1]
x = ats$Temp[1,-1]
x = ats$Temp[1:len(x-1)]
x = ats$Temp[1:length(x-1)]
x
ats
x
ats
x = ats$Temp[1:(ncols(ats)-1)]
x = ats$Temp[1:(ncol(ats)-1)]
x
ncol(ats)-1
ncol(ats)
x = ats$Temp[1:(nrow(ats)-1)]
x
y = ats$Temp[2.]
y
y = ats$Temp[2,]
y = ats$Temp[2:]
y = ats$Temp[2:,]
y = ats$Temp[2:nrow(ats)]
y
cor(x,y)
correlation_score <- cor(x,y)
x_rand <- sample(x, replace = FALSE)
y_rand <- sample(y, replace = FALSE)
x_rand
rand_correlation_score <- cor(x_rand,y_rand)
rand_correlation_score
rand_correlation_score
rand_correlation_score
?vector
Sample_distribution <- vector(NA,10000)
Sample_distribution <- vector(float,10000)
Sample_distribution <- vector(10000)
Sample_distribution <- vector("any",10000)
Sample_distribution <- vector()
Sample_distribution
Sample_distribution <- vector("Float")
Sample_distribution <- vector("float")
Sample_distribution <- vector("Any")
Sample_distribution <- vector("any")
Sample_distribution <-  rep(NA, 10000)
Sample_distribution
Sample_distribution <-  rep(NA, 100)
for (i in 1:100){
x_rand <- sample(x, replace = FALSE)
y_rand <- sample(y, replace = FALSE)
Sample_distribution[i] <- cor(x_rand,y_rand)
}
Sample_distribution
Sample_distribution <-  rep(NA, 10000)
for (i in 1:10000){
x_rand <- sample(x, replace = FALSE)
y_rand <- sample(y, replace = FALSE)
Sample_distribution[i] <- cor(x_rand,y_rand)
}
Sample_distribution
P_value <- filter(Sample_distribution, >correlation_score)
P_value <- filter(Sample_distribution, correlation_score)
P_value
P_value <- filter(Sample_distribution, correlation >= correlation_score)
P_value <- filter(Sample_distribution, Sample_distribution >= correlation_score)
P_value
P_value <- Sample_distribution >= correlation_score
P_value
P_value <- sum(Sample_distribution >= correlation_score)
P_value <- sum(Sample_distribution >= correlation_score)/100
P_value
P_value <- sum(Sample_distribution >= correlation_score)/10000
P_value
hist(Sample_distribution)
