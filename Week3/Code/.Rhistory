#A simple R script to illustrate R input-output.
# Run line by line and check inputs outputs to understand what is
# happening
MyData <- read.csv("../Data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "../Results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../Results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "../Results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../Results/MyData.csv", col.names=FALSE) # ignore column names
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
TreeHeight(37, 40)
#Loads csv file
MyData <- read.csv("../Data/trees.csv", header = TRUE) # import with headers
MyData
#Calculate heights
Heights <- TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
Heights
Heights
#Calculate heights
Heights <- TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
#print(paste("Tree height is:", height))
return (height)
}
#Calculate heights
Heights <- TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
Output <- c(MyData,Heights)
names(Output[,4]) <- "Tree.Height.m"
Output
MyData
hcat(MyData,Heights)
hbind(MyData,Heights)
hcat(MyData,Heights)
cbind(MyData,Heights)
Output <- cbind(MyData,Heights)
Output <- cbind(MyData,Heights)
Output
names(Output[,4]) <- "Tree.Height.m"
Output
head(Output)
#Calculate heights
Tree.Height.m <- TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
Output <- cbind(MyData,Heights)
Output
head(Output)
Output <- cbind(MyData,Tree.Height.m)
head(Output)
#Writes csv file
write.csv(Output, "../Results/TreeHts.csv", row.names=TRUE)
#Writes csv file
write.csv(Output, "../Results/TreeHts.csv")
#Writes csv file
write.csv(Output, "../Results/TreeHts.csv", row.names=FALSE)
MyData
head(MyData)
?commandArgs
help(commandArgs)
#Loads csv file from command line argument
commandArgs()
infile <- x
infile <- "../x.csv"
infile
#Writes csv file with label from command line argument
outfile <- rstrip(infile,".csv")
?rstrip
help(rstrip)
help(strip)
outfile <- "x"
#Writes csv file with label from command line argument
outfile <-
outfile <- paste("../Results/",outfile,"_treeheights.csv")
outfile
#Writes csv file with label from command line argument
outfile <-
outfile <- paste("../Results/",outfile,"_treeheights.csv",sep="")
#Writes csv file with label from command line argument
outfile <-
outfile <- paste("../Results/",outfile,"_treeheights.csv",sep="")
outfile
outfile <- "x"
#Writes csv file with label from command line argument
outfile <-
outfile <- paste("../Results/",outfile,"_treeheights.csv",sep="")
outfile
infile <- "../Data/x_treeheights.csv"
infile
?gsub
#Writes csv file with label from command line argument
outfile <- gsub(".csv","",infile)
outfile
outfile <- gsub("*/","",outfile)
outfile
#Writes csv file with label from command line argument
outfile <- gsub(".csv","",infile)
u
outfile <- gsub("../Data/","",outfile)
outfile
infile
outfile <- paste("../Results/",outfile,"_treeheights.csv",sep="")
outfile
a <- TRUE
if (a == TRUE){
print ("a is TRUE")
} else {
print ("a is FALSE")
}
z <- runif(1) ##random number
if (z <= 0.5) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(0.2) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
## On a single line
z <- runif(0.2) ##random number
z
## On a single line
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
if (z <= 0.25) {
print ("Less than a quarter")
}
## On a single line
z <- runif(1) ##random number
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
z <- runif(1) ##random number
if (z <= 0.25) {
print ("Less than a quarter")
}
for (i in 1:100){
j <- i * i
print(paste(i, " squared is", j ))
}
for(species in c('Heliodoxa rubinoides',
'Boissonneaua jardini',
'Sula nebouxii'))
{
print(paste('The species is', species))
}
v1 <- c("a","bc","def")
for (i in v1){
print(i)
}
i <- 0
while (i<100){
i <- i+1
print(i^2)
}
i <- 0
while (i<100){
i <- i+1
print(i^2)
}
require(dplyr)
attach(iris)
dplyr::tbl_df(iris)
sudo
apt get install
dplyr::glimpse(iris)
utils::View(iris)
dplyr::filter(iris, Sepal.Length > 7)
dplyr::slice(iris, 10:15)
i <- 0 #Initialize i
while(i < Inf) {
if (i == 20) {
break } # Break out of the while loop!
else {
cat("i equals " , i , " \n")
i <- i + 1 # Update i
}
}
for (i in 1:10) {
if ((i %% 2) == 0)
next # pass to next iteration of loop
print(i)
}
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
# Runs a simulation of the ricker model
# Returns a vector of length generations
N <- rep(NA, generations)
# Creates a vector of NA
N[1] <- N0
for (t in 2:generations)
{
N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
}
return (N)
}
plot(Ricker(generations=10), type="l")
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
stochrick()
data <- stochrick()
data
dim(data)
print(system.time(res2<-stochrick()))
runif(1000,.5,1.5)
?sapply
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print(p0))
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,print)
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,function(x) <- print(x*100))
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
#initialize
N<-matrix(NA,numyears,length(p0))
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(p0,function(x){print(x*100)})
#for each pop, loop through the years
#N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
#return(N)
}
stochrickvect()
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100){
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
#loop through the populations
sapply(1:length(p0),function(pop){
sapply(2:numyears,function(yr){
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
})
})
#for each pop, loop through the years
return(N)
}
stochrickvect()
